import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["src/main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	loader: {
		// Disable default WASM loader to let our plugin handle it
	},
	plugins: [
		{
			name: 'wasm-plugin',
			setup(build) {
				// Embed WASM files as base64 strings
				build.onLoad({ filter: /\.wasm$/ }, async (args) => {
					const fs = await import('fs');
					const wasmBuffer = await fs.promises.readFile(args.path);
					const base64 = wasmBuffer.toString('base64');
					return {
						contents: `
							const wasmBase64 = "${base64}";
							const wasmBuffer = Uint8Array.from(atob(wasmBase64), c => c.charCodeAt(0));
							export default wasmBuffer;
						`,
						loader: 'js'
					};
				});
			}
		}
	],
	format: "cjs",
	target: "es2020",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
